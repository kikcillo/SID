options
{
 static = false;
 OUTPUT_DIRECTORY = "generated";
}
PARSER_BEGIN(Parser)
import java.io.*;
import java.net.*;
import java.util.*;
import javax.xml.parsers.*;
import org.xml.sax.XMLReader;
public class Parser
{
 // URL donde obtener empresas y cotizaciones "actuales"
 private final static String URL = "http://www.infobolsa.es/acciones/ibex35";
 // Fichero donde obtener empresas y cotizaciones "obsoletas"
 private final static String FICHERO = "cotizacion.xml";
 Hashtable <String, Double> leeTablaDeFichero(String fichero)
 {
    try
    {
        SAXParserFactory factory = SAXParserFactory.newInstance();
//        factory.setNamespaceAware(true);
    	SAXParser saxParser = factory.newSAXParser();
    	XMLReader parser = saxParser.getXMLReader();
        CotizacionesHandler handler = new CotizacionesHandler();
        parser.setContentHandler(handler);
        saxParser.parse(FICHERO);
        return handler.getTabla();
     }
     catch (Exception e)
    {
     return new Hashtable<String, Double> ();
    }
 }
 void escribeTablaEnFichero(Hashtable <String, Double> tabla, String nombre)
 {
     PrintStream out = null;
     try
     {
        //...
     }
     catch (Exception e)
     {
        e.printStackTrace();
     }
 }

  public static void main(String args [])
  {
      try
      {
          // Entrada de datos de la web
          InputStreamReader stream = new InputStreamReader(new FileInputStream(URL));
          Parser parser = new Parser();
          Hashtable<String, Double> tablaCotizaciones = parser.leeTablaCotizaciones();
          // Entrada de datos de teclado
         System.out.println("Introduzca el nombre de una empresa del IBEX 35: ");
          //...
          // Entrada de datos de fichero
          Hashtable<String, Double> tablaAnterior = parser.leeTablaDeFichero(FICHERO);
          // Diferencia de precios
          //...
          // Salvamos los resultados en fichero
          parser.escribeTablaEnFichero(tablaCotizaciones, FICHERO);
      }
      catch (Exception e)
      {
        System.out.println("Exception " + e.getMessage());
      }
      catch (Error e)
      {
        System.out.println("Error " + e.getMessage());
      }
      }
 }
 PARSER_END(Parser)
 SKIP :
 {
      " "
     | "\r"
     | "\t"
     | "\n"
 }
 TOKEN :
 {
      < CABECERA : "<!DOCTYPE html>" >
     | < HTML : "<html>" >
     | < HTML_FIN : "</html>" >
     | < HEAD : "<head>" >
     | < HEAD_FIN : "</head>" >
     | < BODY : "<body class=\"ifb-menu-push\">" >
     | < BODY_FIN : "</body>" >
     | < NOMBRE_EMPRESA : "<td class=\"name\">" >
     | < COTIZACION_EMPRESA : ("<td class=\"price flop\">" | "<td class=\"price top\">") >
     | < A_HREF : "<a href=\"http://www.infobolsa.es/cotizacion/" >
     | < A_FIN : "</a>" >
     | < ETIQUETA : "<" >
     | < ETIQUETA_FIN : ">" >
     | < BARRA : "/" >
     | < NUMERO: (["0"-"9"])* ( "," )? (["0"-"9"])+ >
     | < CARACTERES : ([ "A"-"Z", "a"-"z", "0"-"9", "Á", "É", "Í", "Ó", "Ú", "Ü", "Ñ",
     "á", "é", "í", "ó", "ú", "ü", "ñ", "¡", "!", "€", ".", "¿", "?", ":", ";", ",",
     "'", "=", "\"", "-", "_", "+", "º", "*", "(", ")", "\\", "@", "%", "#", "&", "[",
     "]", "|", "{", "}", "$" ])+ >
 }

 Hashtable<String, Double> leeTablaCotizaciones() :
 {
      Hashtable<String, Double> tabla = null;
 }
 {
      <CABECERA> <HTML> <HEAD> saltar() <HEAD_FIN> tabla = body() <HTML_FIN>
      {
          return tabla;
      }
 }
 void saltar() :
 {}
 {
    ( <CARACTERES> | <NUMERO> | <ETIQUETA> | <ETIQUETA_FIN> | <BARRA> | <A_FIN>)+
 }
 Hashtable<String, Double> body() :
 {
  Hashtable<String, Double> tabla = null;
 }
 {
  <BODY> saltar() tabla = cotizaciones() <BODY_FIN>
  {
  return tabla;
  }
 }
 Hashtable<String, Double> cotizaciones() :
 {
  Hashtable<String, Double> tabla = new Hashtable<String, Double> ();
  String nombre = "";
  String cotizacion = "";
  Token t;
 }
 {
 (
  <NOMBRE_EMPRESA> <A_HREF> <CARACTERES> <ETIQUETA_FIN>
   (
   nombre = <CARACTERES>
   )
   <A_FIN>
   <COTIZACION_EMPRESA>
   t = <NUMERO>
   {
       cotizacion = Double.parseDouble(t.image);
       tabla.put(nombre,cotizacion);
   }
   )*

  {
  return tabla;
  }
 }